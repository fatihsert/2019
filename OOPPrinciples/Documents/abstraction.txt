[dictionary]

compulsory(adjective) zorunlu
exposed (adjective)açık, korunmasız
consume (verb) tüketmek bitirmek These lights don't consume much electricity.
relevant (adjective) uygun,faydalı.relevant information
exhibit-ed(verb)sergilemek she is exhibitin her horse
reduces(verb) azaltmak, kısmak, indirmek. to reduce air pollution
achieved(verb) başarmak. I've been working all day but i feel i've achieved nothing


_______________________[Source 1]____________________________
Data Abstraction is the property by virtue of which only the essential details are exhibited to the user. 
In C# abstraction is achieved with the help of Abstract classes.

Abstract Classes

An abstract class is declared with the help of abstract keyword.
In C#, you are not allowed to create objects of the abstract class. Or in other words, you cannot use the abstract class directly with the new operator.
Class that contains the abstract keyword with some of its methods(not all abstract method) is known as an Abstract Base Class.
Class that contains the abstract keyword with all of its methods is known as pure Abstract Base Class.
You are not allowed to declare the abstract methods outside the abstract class.
You are not allowed to declare abstract class as Sealed Class.

sometimes we want to create a superclass that only defines a generalized form that will be shared by all of its subclasses, leaving it to each subclass to fill in the details.


Encapsulation vs Data Abstraction
Encapsulation is data hiding(information hiding) while Abstraction is detail hiding(implementation hiding).
While encapsulation groups together data and methods that act upon the data, data abstraction deals with exposing to the user and hiding the details of implementation.
Advantages of Abstraction
It reduces the complexity of viewing the things.
Avoids code duplication and increases reusability.
Helps to increase security of an application or program as only important details are provided to the user.

https://www.geeksforgeeks.org/c-sharp-abstraction/



_______________________[Source 2]____________________________

Its main goal is to handle complexity by hiding unnecessary details from the user. That enables the user to implement more complex logic on top of the provided abstraction without understanding or even thinking about all the hidden complexity.
 


https://stackify.com/oop-concept-abstraction/#targetText=Abstraction%20is%20one%20of%20the,unnecessary%20details%20from%20the%20user.


_______________________[Source 3]____________________________




https://www.scientecheasy.com/2019/05/java-abstraction-abstract-class.html


_______________________[Source 3]____________________________

!!!Abstraction hides complexity by giving you a more abstract picture, a sort of 10,000 feet view, while Encapsulation hides internal working so that you can change it later. In other words, Abstraction hides details at the design level, while Encapsulation hides details at the implementation level.

There are also the different levels of Abstraction and it's good practice that classes should interact with other classes with the same level of abstraction or higher level of abstraction. As you increase the level of Abstraction, things start getting simpler and simpler because you leave out details.


On the other hand, Encapsulation is all about implementation. Its sole purpose is to hide internal working of objects from outside world so that you can change it later without impacting outside clients.


https://javarevisited.blogspot.com/2017/04/difference-between-abstraction-and-encapsulation-in-java-oop.html#targetText=2)%20Abstraction%20is%20about%20hiding,an%20object%20from%20outside%20world.


_______________________[Note]____________________________
Sorular
Abstraction nedir?
 oluşturduğumuz nesnelerin içersindeki detayların ve karmaşıklığını(methodların) kullanıcılardan gizlenmesi işlemdir.
Detayları nasıl ve neden gizleriz?
 kodlama yaparken bir çok nesne birbiri ile ilişki içersinde olur . 
 Nesneler arasında kurulan iletişimin detayları kullanıcı için gereksizdir. sadece kullanıcının bileceği detayları kullanıcıya göstermek hem kafa karışıklığının ortadan kalmasına hemde kullanıcıyı gereksiz detaylar ile zaman kaybetmesine mani olacaktır.
 örneğin arabaya bindiğimizde bize sunulan detaylar belli gaz, fren, vites vs.. ama bu birleşenlerin arkasında bir çok detay gizli ve kullanan kişinin bunları bilmesine gerek yok.
 kullanıcı için önemli olan input ve output .
 kodlamada bu gizliliği bu soyutlamayı access modiferslar ile sağlıyoruz.
ne faydası var?
1. ihtiyaç dışı detayların gizlenmesi sayesinde daha kullanılabilir bir nesnenin oluşturması.
2. kod tekrarının ortadan kalkması. örneğin benim math classını tekradan yazmama gerek yok. hangi inputu alacağını ve nasıl bir output beklediğimi biliyorum ama kullandığım method neler yapıyor bilmiyorum ve gerekte yok.
3. kod tekrarının ortadan kalması otomatik olarak kodların kısalması anlamına geliyor.
4. kod bakımının maliyetini azaltır. örneğin kahve diye bir nesnemiz ve demle diye bir methodumuz olsun .Demle methodunda yapacağımız bir düzenleme bu methodu kullanan kişileri otomatikman etkiler ve kullanan kişilerin hiç birşey yapamsına gerek yok.
  herkes kendi demle methodunu yazmış olsaydı bu özellik için bir çok yerde düzenleme yapmamız gerekebilirdi.
5.4. maddeden dolayı test maliyetininde azalması sonuçta değişiklik 1 yerde ve sadece burayı test edeceğiz.

encapsulationdan farkı ne?
abstraction karmaşıklığı gizlerken ,encapsulation iç işleyişi gizler.

Abstraction hides complexity by giving you a more abstract picture, a sort of 10,000 feet view, while Encapsulation hides internal working so that you can change it later. In other words, Abstraction hides details at the design level, while Encapsulation hides details at the implementation level.
